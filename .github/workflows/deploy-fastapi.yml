name: Deploy FastAPI Backend to EKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_rebuild:
        description: 'Force rebuild Docker image'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: churn-prediction-api
  EKS_CLUSTER_NAME: churnmodel
  K8S_NAMESPACE: default

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION \
          --image-scanning-configuration scanOnPush=true \
          --encryption-configuration encryptionType=AES256
          
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd fastapi-deployment
        
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing images to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
        
    - name: Create AWS credentials secret
      run: |
        kubectl create secret generic aws-credentials \
          --from-literal=aws-access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --from-literal=aws-secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --namespace=$K8S_NAMESPACE \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Update Kubernetes manifests
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd fastapi-deployment
        
        echo "Updating image in deployment manifest..."
        sed -i "s|image: .*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s-deployment.yaml
        
        echo "Adding deployment timestamp..."
        sed -i "/metadata:/a\\  annotations:\n    deployment.kubernetes.io/revision: \"$(date +%s)\"" k8s-deployment.yaml
        
    - name: Deploy to EKS
      run: |
        cd fastapi-deployment
        
        echo "Applying deployment..."
        kubectl apply -f k8s-deployment.yaml --namespace=$K8S_NAMESPACE
        
        echo "Waiting for rollout to complete..."
        kubectl rollout status deployment/churn-prediction-api --namespace=$K8S_NAMESPACE --timeout=300s
        
    - name: Verify deployment
      run: |
        echo "Checking deployment status..."
        kubectl get pods -l app=churn-prediction-api --namespace=$K8S_NAMESPACE
        kubectl get services --namespace=$K8S_NAMESPACE
        
        echo "Waiting for pods to be ready..."
        kubectl wait --for=condition=ready pod -l app=churn-prediction-api --namespace=$K8S_NAMESPACE --timeout=120s
        
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        if [ -z "$NODE_IP" ]; then
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        fi
        
        echo "Deployment successful!"
        echo "API Health Check: http://$NODE_IP:30080/health"
        echo "API Documentation: http://$NODE_IP:30080/docs"
        echo "Model Info: http://$NODE_IP:30080/model-info"
        
    - name: Health check
      run: |
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        if [ -z "$NODE_IP" ]; then
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        fi
        
        echo "Waiting for service to be ready..."
        sleep 15
        
        echo "Running health checks..."
        for i in {1..5}; do
          if curl -f -s "http://$NODE_IP:30080/health" > /dev/null; then
            echo "Health check passed!"
            curl -s "http://$NODE_IP:30080/health" | jq .
            break
          else
            echo "Health check attempt $i/5 failed, retrying..."
            sleep 10
          fi
        done
        
    - name: Generate deployment summary
      if: always()
      run: |
        echo "## FastAPI Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.IMAGE_URI }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster**: ${{ env.EKS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: ${{ env.K8S_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        if [ -z "$NODE_IP" ]; then
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        fi
        
        echo "### Access URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: http://$NODE_IP:30080/health" >> $GITHUB_STEP_SUMMARY
        echo "- **API Docs**: http://$NODE_IP:30080/docs" >> $GITHUB_STEP_SUMMARY
        echo "- **Model Info**: http://$NODE_IP:30080/model-info" >> $GITHUB_STEP_SUMMARY
        echo "- **Reload Model**: http://$NODE_IP:30080/reload-model (POST)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Pod Status" >> $GITHUB_STEP_SUMMARY
        kubectl get pods -l app=churn-prediction-api --namespace=$K8S_NAMESPACE >> $GITHUB_STEP_SUMMARY 